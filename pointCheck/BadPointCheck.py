# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'BadPointCheck.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import multiprocessing
import os
import sys
import threading
from time import sleep

from PyQt5 import QtCore, QtWidgets
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QFileDialog

from pointCheck.pc import bad_check_area


class Ui_MainWindow(object):

    def setupUi(self, MainWindow):
        self.MainWindow = MainWindow
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(261, 137)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.progressBar = QtWidgets.QProgressBar(self.centralwidget)
        global progressBar
        self.progressBar.setGeometry(QtCore.QRect(10, 40, 251, 31))
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(10, 10, 101, 20))
        self.label.setObjectName("label")
        self.buttonStartCheck = QtWidgets.QPushButton(self.centralwidget)
        self.buttonStartCheck.setGeometry(QtCore.QRect(10, 80, 221, 53))
        self.buttonStartCheck.setObjectName("buttonStartCheck")
        self.lable_Status = QtWidgets.QLabel(self.centralwidget)
        self.lable_Status.setGeometry(QtCore.QRect(160, 10, 51, 20))
        self.lable_Status.setObjectName("lable_Status")
        MainWindow.setCentralWidget(self.centralwidget)

        self.buttonStartCheck.clicked.connect(self.checkBadPoint)
        self.timer = QtCore.QBasicTimer()

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    picture_folder = ""

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "坏点检测软件"))
        self.buttonStartCheck.setText(_translate("MainWindow", "开始检测"))
        self.lable_Status.setText(_translate("MainWindow", "状态："))

    def checkBadPoint(self):
        if self.timer.isActive():
            self.timer.stop()
            self.lable_Status.setText("未开始检测")
            self.progressBar.setMaximum(100)
        else:
            self.progressBar.setValue(0)
            self.timer.start(100, self.MainWindow)
            self.lable_Status.setText("正在检测")

            self.buttonStartCheck.setEnabled(False)
            picture_folder = QFileDialog.getExistingDirectory()
            self.lable_Status.setText(picture_folder)
            if picture_folder:
                if self.interface_Out(picture_folder) == "Done":
                    self.progressBar.setValue(100)
                    self.lable_Status.setText("检测完毕")
                    self.buttonStartCheck.setEnabled(True)

    def interface_Out(self, image_path):
        """
            Description:
            图片坏点检测：
            1、0 - 纯白图片检测：判断每个像素点Y亮度小于-5即为坏点
            2、1 - 纯黑图片检测：判断每个像素点Y亮度大于60即为坏点

            换算公式：
            Y(亮度)=(0.299*R)+(0.587*G)+(0.114*B)

            判断单张图片是否PASS：坏点数不超过0.002%

        """

        # image_path = "./pictures/"
        # # image_path = "./pictures_cat/"
        pictureFile = os.listdir(image_path)

        pool = multiprocessing.Pool(len(pictureFile))
        check_type = 1
        # check_type = 0
        # 每张图片独立一个进程去操作
        # for picture in pictureFile:
        #     if len(pictureFile) >= 10:
        #         sleep(1)
        #     print("正在分析图片：{},图片较多请耐心等候！ ".format(picture))
        #     picture_path = "{}/{}".format(image_path, picture)
        #     pool.apply_async(func=bad_check_area, args=(picture_path, check_type, picture,))
        # pool.close()
        # pool.join()

        value = 0
        for picture in pictureFile:
            picture_count = len(pictureFile)
            if picture_count >= 10:
                sleep(1)
            print("正在分析图片：{},图片较多请耐心等候！ ".format(picture))
            picture_path = "{}/{}".format(image_path, picture)
            t = threading.Thread(target=bad_check_area, args=(picture_path, check_type, picture,))
            t.start()
            t.join(3)
            value += (1 / picture_count) * 100
            self.progressBar.setValue(value)
        return "Done"


if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    app.setWindowIcon(QIcon("../uifile/doughnut.ico"))
    mainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(mainWindow)
    mainWindow.show()
    sys.exit(app.exec_())
